{

    "whatIsJavascript": 
    {
        "content": ["<h1 class='title'>Javascript in a nutshell</h1>" ,
                  "<p class='info-text'>JavaScript is a scripting language used to create and control dynamic website content,",
                  "i.e. data validation, display popup messages, handling different events of DOM elements, modifying style of DOM elements etc.</p>",
                  "<br />",
                  "<p class='info-text'>JavaScript is mostly used on the front end, but it’s versatile enough to be used on back end infrastructure, too.</>", 
                  "<p class='info-text'>Overview of javascript:</p>",
                  "<br/>",

                  "<div class='beige-border' id='weakly-typed-language-border' >Weakly Typed Language</div>",
                    "<div class='info-text'>",
                       "<p class='dot-text'> • No explicit type assignment:",
                            "<span class = 'explicit-dot-text'> Javascript knows types like numbers, string or booleans, but it doesn't force you to define which type you are using in a variable.</span>",
                       "</p>",
                       "<p class='dot-text'> • Data types can be switched dynamically:",
                       "<span class = 'explicit-dot-text'> Indeed, you can have a variable where you store a number which you can suddenly change to a text variable. While this gives you greater flexibility to be able to change variables and not to have strict typing, it can also lead to errors, so it's something you have to also be aware of.</span>",
                       "</p>",
                    "</div>",
                    "<br/>",
                  
                  "<div class='aquamarine-border' id='object-oriented-language-border'>Multi-paradigm Language</div>",
                  "<div class='info-text'>",
                    "<p class='dot-text'> • Data can be organized in logical objects:",
                       "<span class = 'explicit-dot-text'> JavaScript is a multi-paradigm, dynamic language with types and operators, standard built-in objects, and methods. Its syntax is based on the Java and C languages — many structures from those languages apply to JavaScript as well. JavaScript supports object-oriented programming with object prototypes, instead of classes. JavaScript also supports functional programming — because they are objects, functions may be stored in variables and passed around like any other object.</span>",
                    "</p>",
                  "</div>",
                  "<br/>",

                  "<div class='tan-border' id='versatile-border'>Versatile Language</div>",
                  "<div class='info-text'>",
                    "<p class='dot-text'> • Runs in browser & directly on a PC/Server:",
                       "<span class = 'explicit-dot-text'> Javacript runs in a browser and this is actually where it comes from, but you can also use it with NodeJs to run it on your PC outside of a browser setup or also on a server.</span>",
                    "</p>",
                  "</div>",
                  "<br/>"
                  ]
    },

    "varVsLetVsConst":
    {
        "content":[ "<h1 class='title'>var, let, const -What's the difference?</h1>",
                    "<p class='info-text'> Before we can understand how <code class = 'purple-font-bold'>var</code>, <code class = 'purple-font-bold'>let</code> and <code class = 'purple-font-bold'>const</code> differ we need to understand a computer science-y concept called",
                      "<span class = 'brown-and-italic'> scope.</span>",
                      "<span>Scoping is determining where variables, functions, and objects are accessible in your code during runtime. </span>",
                    "</p>",
                    "<br/>",

                    "<p class='info-text'>Firstly, <code class = 'purple-font-bold'>var</code> variables <span class = 'bold-text'>can be redefined or reassigned</span>. Let’s use console.log to show the width which we can update to be 200, and then we’ll console log the width again.</p>",
                    "<pre><code class='language-javascript'>var width = 100;",
                        "console.log(width); // 100",
                        "width = 200;",
                        "console.log(width); // 200",
                        "var width = 300",
                        "console.log(width) //300",
                    "</code></pre>",
                    "<br />",

                    "<p class='info-text'><code class = 'purple-font-bold'>let</code> variables <span class = 'bold-text'>can be reassigned, but not redefined</span>.</p>",
                    "<pre><code class='language-javascript'>let age = 70;",
                    "age = 23; // Works fine",
                    "let age = 34; // SyntaxError: Identifier 'age' has already been declared",
                    "</code></pre>",
                    "<br />",

                    "<p class='info-text'><code class = 'purple-font-bold'>const</code> variables <span class = 'bold-text'>cannot be rebinded, neither redefined</span>.</p>",
                    "<pre><code class='language-javascript'>const a = 42;",
                    "a = 43; // TypeError: Assignment to constant variable.",
                    "const a = 44 // SyntaxError: Identifier 'a' has already been declared",
                    "</code></pre>",
                    "<p class='info-text'><span class='red-text'>Note!</span> It doesn't mean that the value is immutable. Its properties still can be changed.</p>",
                    "<pre><code class='language-javascript'>const obj = {};",
                    "obj.a = 42;",
                    "console.log(obj.a); // 42",
                    "</code></pre>",
                    "<br />",

                    "<p class='info-text'><code class = 'purple-font-bold'>var</code> variables are <span class = 'brown-and-italic'>function scoped</span>, which means that they are only available inside the function that they are created in. However, if they are not declared in a function, then they are <span class = 'brown-and-italic'>globally scoped</span>, and they’re available in the whole window.</p>",
                    "<pre><code class='language-javascript'>var cat = 'cat';",
                    "function animals(){",
                        "   var dog = 'dog';",
                        "   if (cat != null) {",
                        "     var kitten = 'kitten';",
                        "   }",
                        "   console.log(cat); // cat",
                        "   console.log(dog); // dog",
                        "   console.log(kitten); //kitten",
                    "}",
                    "console.log(cat); // cat",
                    "console.log(bird); // Uncaught ReferenceError: dog is not defined",
                    "console.log(kitten); // Uncaught ReferenceError: kitten is not defined",
                    "animals();",
                "</code></pre>",
                "<br />",

                "<p class='info-text'>However, in many cases <code class = 'purple-font-bold'>var</code> doesn't seem like it would be the best choice. But why? Look careful here: </p>",
                "<pre><code class='language-javascript'>var age = 100;",
                    "if(age > 12) {",
                    "  var dogYears = age * 7;",
                    "console.log(`You are ${dogYears} dog years old!`);",
                    "}",
                "</code></pre>",
                "<p class='info-text'>The one thing that is a little bit strange here is that <code> var dogYears </code> is just a temporary variable, and I just needed this real quick in order to calculate something and then stick it into a <code>console.log</code>. If you go to your browser console and call dogYears, you’ll see that it’s leaked outside of the if statement and it is now a global variable that lives on window, which isn’t really what we want.</p>",
                "<p class='info-text'>Now it's time for <code class = 'purple-font-bold'>let</code> and <code class = 'purple-font-bold'>const</code> to shine and show why they are better. </p>",
                "<br />",

                "<p class='info-text'>One of the benefits of using <code class = 'purple-font-bold'>let</code> and <code class = 'purple-font-bold'>const</code> is that instead of a variable being scoped to the function, it is <span class = 'brown-and-italic'>block scoped</span>. It means that it will be scoped to the closest set of curly brackets. This code seems like a better choice:</p>",
                "<pre><code class='language-javascript'>let age = 100;",
                    "if(age > 12) {",
                    "  let dogYears = age * 7;",
                    "console.log(`You are ${dogYears} dog years old!`);",
                    "}",
                "</code></pre>",
                "<p class='info-text'>If you call dogYears in the browser console, it says, “Dog years is not defined.” Why? Because I declared it as a <code class = 'purple-font-bold'>let</code> variable. It is only declared inside of a <span class = 'brown-and-italic'>block scope</span>, not a global scope like var and that temporary variable has not leaked out of the block.</p>",
                "<br/>",

                "<p class='info-text'>If you use <code class = 'purple-font-bold'>let</code> instead of <code class = 'purple-font-bold'>var</code> in a loop, with each iteration you get a new variable. That means that you can safely use a closure inside a loop:</p>",
                "<pre><code class='language-javascript'>// Logs 3 thrice, not what we meant.",
                "for (var i = 0; i < 3; i++) {",
                "   setTimeout(() => console.log(i), 0);",
                "}\n",
                "// Logs 0, 1 and 2, as expected.",
                "for (let j = 0; j < 3; j++) {",
                "    setTimeout(() => console.log(j), 0);",
                "}",
                "</code></pre>",
                "<br />",

                "<p class='info-text'>Because of the <span class = 'bold-text'>temporal dead zone</span>, variables declared using <code class = 'purple-font-bold'>let</code> or <code class = 'purple-font-bold'>const</code> can't be accessed before they are declared. Attempting to do so throws an error.</p>",
                "<pre><code class='language-javascript'>console.log(noTDZ); // undefined",
                "var noTDZ = 43;",
                "console.log(hasTDZ); // ReferenceError: hasTDZ is not defined",
                "const hasTDZ = 42;",
                "</code></pre>",
                "<br />",

                "<div class='tan-border' id='bytheway-border'>#bytheway</div>",
                "<p class='info-text'><span class = 'bold-text'>Is using '<code>var</code>' to declare variables optional?</span></p>",
                "<p class='info-text'>This is one of the tricky parts of Javascript, but also one of its core features. A variable declared with var 'begins its life' right where you declare it. If you leave out the var, it's like you're talking about a variable that you have used before.</p>",
                "<pre><code class='language-javascript'>var cat = 'Sasha';",
                "cat = 'Kate';",
                "function animal() {",
                "   if (cat === 'Kate') {",
                "     dog = 'Ozzy'; // not declared before. Please avoid doing this",
                "   }",
                "}",
                "</code></pre>",
                "<p class='info-text'>With regards to scope, it is <span class='bold-text'>not</span> true that variables automatically become global. Rather, Javascript will traverse up the scope chain to see if you have used the variable before. If it finds an instance of a variable of the same name used before, it'll use that and whatever scope it was declared in. If it doesn't encounter the variable anywhere it'll eventually hit the global object (<code>window</code> in a browser) and will attach the variable to it.</p>",
                "<br />",
                "<p class='info-text'><span class = 'bold-text'>Is '<code>var</code>' dead?</span></p>",
                "<p class='info-text'> Some people are saying, “<code>var</code> is dead!” Some say, “Use <code>let</code>.” while others always use <code>const</code>.</p>",
                "<p class='info-text'><code>var</code> isn’t dead – it still does what it always has done — it’s function scoped and you can reassign or re-bind it. Here are the opinions of some very smart people in the Javascript scene (click on the name to read the whole article):</p>",
                "<p class='info-text'><a target='_blank' href='https://mathiasbynens.be/notes/es6-const'>Mathias Byens</a> says that whenever you make a variable, assume it’s <code>const</code>. Only use <code>let</code> if you need to update the value of the variable. You can use <code>const</code> to keep it the same value.  </p>",
                "<p class='info-text'><a target='_blank' href='https://davidwalsh.name/for-and-against-let'>Kyle Simpson</a>, author of You Don’t Know JS, and all-around Javascript guru, argues that: 'There are going to be places in real world code where some variables are going to be properly scoped to the entire function, and for those variables, var is a better signal'</p>",
                "<p class='info-text'>Most Javascript experts agree <code>var</code> shouldn’t be used. Douglas Crockford, the man who popularized JSON, is against the use of <code>var</code>. He indicates that, “var might possibly still be useful in an extreme case like machine-generated code, but I’m stretching hard there. Wes Bos also says he won’t use var.“</p>"
        ]
    },

    "objects" : {
      "content": [
        "<h1 class='title'>Understanding Objects in Javascript</h1>",
        "<p class='info-text'>An <span class ='bold-text'>object</span> in JavaScript is a data type that is composed of a collection of <span class ='bold-text'>names</span> or <span class ='bold-text'>keys</span> and <span class ='bold-text'>values</span>, represented in <span class ='bold-text'>name:value pairs</span>. The name:value pairs can consist of <span class ='bold-text'>properties</span> that may contain any data type — including strings, numbers, and Booleans — as well as methods, which are functions contained within an object.</p>",
        "<br />",
        "<p class='info-text'><span class='semi-title'> Creating an Object </span> </p>",
        "<p class='info-text'> There are two ways to construct an object in JavaScript:</p>",
        "<div class='info-text'>",
          "<p class='dot-text'> • The object literal:",
            "<span class = 'explicit-dot-text'> uses curly brackets: <code>{}</code></span>",
          "</p>",
          "<p class='dot-text'> • The object constructor:",
            "<span class = 'explicit-dot-text'> uses the <code>new</code> keyword</span>",
          "</p>",
        "</div>",
        "<pre><code class='language-javascript'>// Initialize object literal with curly brackets",
        "const objectLiteral = {};",
        "// Initialize object constructor with new Object",
        "const objectConstructor = new Object();",
        "</code></pre>",
        "<br />",

        "<p class='info-text'>We can create an example object, contained in the variable gimli, to describe a character.</p>",
        "<pre><code class='language-javascript'>// Initialize gimli object",
        "const gimli = {",
        "   name: 'Gimli',",
        "   race: 'dwarf',",
        "   weapon: 'axe',",
        "   greet: function() {",
        "   return `Hi, my name is ${this.name}!`;",
        "   },",
        "};",
        "</code></pre>",
        "<p class='info-text'>Our new object is gimli, which has three properties. Each property consists of a <span class='bold-text'>name:value</span> pair, also known as <span class='bold-text'>key:value</span> pair. <code>weapon</code> is one of the property names, which is linked to the property value <code>'axe'</code>, a string. It has one method, with a method name of <code>greet</code> and the method value consisting of the contents of the <code>function</code>.</p>",
        "<p class ='info-text'>Within greet, you may notice the <code>this</code> keyword. When using this inside of an object, it refers to the current object, in this case gimli.</p>",
        "<br />",

        "<p class='info-text'><span class='semi-title'> Accessing Object Properties </span> </p>",
        "<p class='info-text'> There are two ways to access an object’s properties:</p>",
        "<div class='info-text'>",
          "<p class='dot-text'> • Dot notation: ",
            "<span class = 'explicit-dot-text'><code>.</code></span>",
          "</p>",
          "<p class='dot-text'> • Bracket notation: ",
            "<span class = 'explicit-dot-text'><code>[]</code></span>",
          "</p>",
        "</div>",
        "<pre><code class='language-javascript'>console.log(gimli.name); // Gimli",
        "console.log(gimli['name']) // Gimli",
        "console.log(gimli.greet()) // Hi, my name is Gimli!",
        "</code></pre>",
        "<br />",

        "<p class='info-text'><span class='semi-title'> Adding and Modifying Object Properties </span> </p>",
        "<p class='info-text'>In order to add a new property to an object, you would assign a new value to a property with the assignment operator.Both the dot and bracket notation can be used (<code>=</code>).</p>",
        "<pre><code class='language-javascript'>// Add new age property to gimli",
        "gimli.age = 24;",
        "// Add new height property to gimli",
        "gimli['height'] = 170",
        "// Add new fight method to gimli",
        "gimli.fight = function() {",
        "return `Gimli attacks with an ${this.weapon}.`;",
        "</code></pre>",
        "<p class='info-text'>Using the same method, an object’s property can be modified by assigning a new value to an existing property.</p>",
        "<pre><code class='language-javascript'>// Update weapon from axe to battle axe",
        "gimli.weapon = 'battle axe';",
        "</code></pre>",
        "<br />",

        "<p class='info-text'><span class='semi-title'> Removing Object Properties </span> </p>",
        "<p class='info-text'>In order to remove a property from an object, you will utilize the <code>delete</code> keyword. <code>delete</code> is an operator that removes a property from an object.</p>",
        "<pre><code class='language-javascript'>// Remove weapon from gimli",
        "delete gimli.weapon;",
        "</code></pre>",
        "<br />",

        "<p class='info-text'><span class='semi-title'> Looping Through Object Properties </span> </p>",
        "<p class='info-text'>Here is a simplified version of our main object example, gimli.</p>",
        "<pre><code class='language-javascript'>const gimli = {",
        "   name: 'Gimli',",
        "   race: 'dwarf',",
        "   weapon: 'battle axe',",
        "};",
        "</code></pre>",
        "<br />",

        "<p class='info-text'>We can use <code>for...in</code> to traverse through all the properties of gimli and print them to the console. Using bracket notation, we can retrieve the property value as a variable, in this case <code>key</code>.</p>",
        "<pre><code class='language-javascript'>// Iterate through properties of gimli",
        "for (let key in gimli) {",
        "   console.log(gimli[key]);",
        "}",
        "// Output: Gimli, dwarf, battle axe ",
        "</code></pre>",
        "<br />",

        "<p class='info-text'>Another way to loop through objects is first to convert the object into an <a href='#' onclick='arraysClick()'>array</a>. Then, you loop through the array.</p>",
        "<br />",

        "<p class='info-text'><code>Object.keys</code> creates an array that contains the properties of an object.</p>",
        "<pre><code class='language-javascript'>const keys = Object.keys(gimli)",
        "console.log(keys) // ['name', 'race', 'weapon']",
        "</code></pre>",
        "<br />",

        "<p class='info-text'><code>Object.values</code> creates an array that contains the values of every property in an object.</p>",
        "<pre><code class='language-javascript'>const values = Object.values(gimli)",
        "console.log(values) // ['Gimli', 'dwarf', 'battle axe']",
        "</code></pre>",
        "<br />",

        "<p class='info-text'><code>Object.entries</code> creates an array of arrays. Each inner array has two item. The first item is the property; the second item is the value.</p>",
        "<pre><code class='language-javascript'>const entries = Object.entries(gimli)",
        "console.log(entries) ",
        "// [",
        "//   ['name', 'Gimli'],",
        "//   ['race', 'dwarf'],",
        "//   ['weapon', 'battle axe']",
        "// ]",
        "</code></pre>",
        "<br />"
      ]
    },

    "arrays":{
      "content" :[
        "<h1 class='title'>Understanding Arrays in Javascript</h1>",
        "<p class='info-text'>An <span class='bold-text'>array</span> in JavaScript is a type of global object that is used to store data. Arrays consist of an ordered collection or list containing zero or more datatypes, and use numbered indices starting from 0 to access specific items.</p>",
        "<br />",

        "<p class='info-text'><span class='semi-title'> Creating an Array </span> </p>",
        "<p class='info-text'> There are two ways to create an array in Javascript:</p>",
        "<div class='info-text'>",
          "<p class='dot-text'> • The array literal: ",
            "<span class = 'explicit-dot-text'>uses curly brackets: <code>{}</code></span>",
          "</p>",
          "<p class='dot-text'> • The array constructor: ",
            "<span class = 'explicit-dot-text'>uses the <code>new</code> keyword</span>",
          "</p>",
        "</div>",
        "<pre><code class='language-javascript'>// Initialize array of shark species with array literal",
        "let sharks = [",
        "     'Hammerhead',",
        "     'Great White',",
        "     'Tiger',",
        "];",
        "// Initialize array of fruits with array constructor",
        "let fruits = new Array(",
        "     'Mango',",
        "     'Strawberry',",
        "     'Plum',",
        ");",
        "</code></pre>",
        "<br />",

        "<p class='info-text'>Arrays are often used to group together lists of similar data types, but they can technically contain any value or a mix of values, including other arrays.</p>",
        "<pre><code class='language-javascript'>// Initialize array of mixed datatypes",
        "let mixedData = [",
        "   'String',",
        "   null,",
        "   7,",
        "   [",
        "       'another',",
        "       'array',",
        "    ],",
        "];",
        "</code></pre>",
        "<div class='beige-border' id='note-creating-array' ><span class='bold-text'>Note</span>: You may see the last item in an array with or without a final comma. This is known as a <span class='bold-text'>trailing comma</span>. It is common to see them omitted, but generally it is becomming preferred to include them in your code, as this makes version control diffs more clear, and makes it easier to add and remove items without errors. Note that trailing commas are not allowed in JSON files.</div>",
        "<br />",

        "<p class='info-text'><span class='bold-text'>For most of the demonstrations below, we will use this array:</span></p>",
        "<pre><code class='language-javascript'>let seaCreatures = [",
        "   'octopus',",
        "   'squid',",
        "   'shark',",
        "   'seahorse',",
        "   'starfish',",
        "   'whale'",
        "];",
        "</code></pre>",
        "<br />",

        "<p class='info-text'><span class='semi-title'> Indexing Arrays </span> </p>",
        "<p class='info-text'><code>indexOf(searchElement, optional: fromIndex)</code> method searches the array for the specified item, and returns its position. Returns -1 if the item is not found. If the item is present more than once, the <code>indexOf</code> method returns the position of the first occurence.</p>",
        "<pre><code class='language-javascript'>seaCreatures.indexOf('seahorse'); // 3",
        "seaCreatures.indexOf('cuttlefish'); // -1",
        "</code></pre>",
        "<p class='info-text'><span class='bold-text'>Tip:</span> If you want to search from end to start, use the <code>lastIndexOf()</code> method</p>",
        "<br />",

        "<p class='info-text'><code>findIndex(callback)</code> method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating that no element passed the test.</p>",
        "<pre><code class='language-javascript'>const item = seaCreatures.findIndex(element => element.startsWith('s'))",
        "console.log(item) // 1",
        "</code></pre>",
        "<p class='info-text' ><span class='bold-text'>Note!</span> <code>indexOf()</code> expects a value as first parameter. This makes it a good choice to find the index in arrays of primitive types (like string, number, or boolean). \n <code>findIndex()</code> expects a callback as first parameter. Use this if you need the index in arrays with non-primitive types (e.g. objects) or your find condition is more complex than just a value.</p>",
        "<br />",

        "<p class='info-text'><span class='semi-title'> Adding Item(s) to an Array</span> </p>",
        "<div class='info-text'>",
        "<p class='dot-text'> • Add item(s) to the end of an array: ",
          "<span class = 'explicit-dot-text'><code>push(item1, item2, ...itemX)</code></span>",
        "</p>",
        "</div>",
        "<pre><code class='language-javascript'>// Append lobster to the end of the seaCreatures array",
        "seaCreatures.push('lobster'); // [ 'octopus', 'squid', 'shark', 'seahorse', 'starfish', 'whale', 'lobster' ]",
        "</code></pre>",
        "<br />",

        "<div class='info-text'>",
        "<p class='dot-text'> • Add item(s) in the beginning of an array: ",
          "<span class = 'explicit-dot-text'><code>unshift(item1, item2, ..itemX)</code></span>",
        "</p>",
        "</div>",
        "<pre><code class='language-javascript'>// Append dragonfish to the beginning of the seaCreatures array",
        "seaCreatures.unshift('dragonfish'); // [ 'dragonfish', 'octopus', 'squid', 'shark', 'seahorse', 'starfish', 'whale' ]",
        "</code></pre>",
        "<br />",

        "<div class='info-text'>",
        "<p class='dot-text'> • Add item(s) between other elements of an array: ",
          "<span class = 'explicit-dot-text'><code>splice(start, optional: deleteCount, optional: item1, item2, ..itemX)</code></span>",
        "</p>",
        "</div>",
        "<pre><code class='language-javascript'>// Append turtle between shark and seahorse",
        "seaCreatures.splice(3, 0, 'turtle' ); // [ 'octopus', 'squid', 'shark', 'turtle', 'seahorse', 'starfish', 'whale' ]",
        "</code></pre>",
        "<br />",
        
        "<p class='info-text'><span class='semi-title'> Removing Item(s) from an Array</span> </p>",
        "<div class='info-text'>",
        "<p class='dot-text'> • Remove the last item of an array: ",
          "<span class = 'explicit-dot-text'><code>pop()</code></span>",
        "</p>",
        "</div>",
        "<pre><code class='language-javascript'>// Remove the last item from the seaCreatures array",
        "seaCreatures.pop(); // [ 'octopus', 'squid', 'shark', 'seahorse', 'starfish']",
        "</code></pre>",
        "<br />",

        "<div class='info-text'>",
        "<p class='dot-text'> • Remove the first item of an array: ",
          "<span class = 'explicit-dot-text'><code>shift()</code></span>",
        "</p>",
        "</div>",
        "<pre><code class='language-javascript'>// Remove the first item of the seaCreatures array",
        "seaCreatures.unshift(); // [ 'squid', 'shark', 'seahorse', 'starfish', 'whale' ]",
        "</code></pre>",
        "<br />",

        "<div class='info-text'>",
        "<p class='dot-text'> • Remove an item on a specific index of an array: ",
          "<span class = 'explicit-dot-text'><code>splice(start, optional: deleteCount, optional: item1, item2, ..itemX)</code></span>",
        "</p>",
        "</div>",
        "<pre><code class='language-javascript'>// Remove item on index 3 of the seaCreatures array",
        "seaCreatures.splice(3,1); // [ 'octopus','squid', 'shark', 'starfish', 'whale' ]",
        "</code></pre>",
        "<br />",

        "<p class='info-text'><span class='semi-title'> Modifying Items in Arrays </span> </p>",
        "<p class='info-text'>We can overwrite any value in an array by assigning a new value using the assignment operator, just like we would with a regular variable.</p>",
        "<pre><code class='language-javascript'>// Assign manatee to the first item in the seaCreatures array",
        "seaCreatures[0] = 'manatee'; // [ 'manatee', 'squid', 'shark', 'seahorse', 'starfish', 'whale' ]",
        "</code></pre>",
        "<br />",

        "<p class='info-text'>Another way to modify a value is using the <code>splice()</code> method with a new parameter. If we wanted to change the value of seahorse, which is the item at index 3, we could remove it and add a new item in its place.</p>",
        "<pre><code class='language-javascript'>// Replace seahorse with sea lion using splice method",
        "seaCreatures.splice(3, 1, 'sea lion'); // [ 'octopus', 'squid', 'shark', 'sea lion', 'starfish', 'whale' ]",
        "</code></pre>",
        "<br />",

        "<p class='info-text'><span class='semi-title'> Looping Through an Array </span> </p>",
        "<p class='info-text'><code>for..of</code> lets you loop over data structures that are iterable such as Arrays, strings, Maps, Sets, and more.</p>",
        "<pre><code class='language-javascript'>// Loop through each element of seaCreatures array",
        "for (let creature of seaCreatures) {",
        "console.log(creature); //  octopus squid shark seahorse starfish whale ",
        "}",
        "</code></pre>"     
    ]},

    "functions": {
      "content":[
        "<h1 class='title'>Understanding Functions in Javascript</h1>",
        "<p class='info-text'>Generally speaking, a function is a 'subprogram' that can be <span class='bold-text'>called</span> by code external (or internal in the case of recursion) to the function. Like the program itself, a function is composed of a sequence of statements called the <span class='bold-text'>function body</span>. Values can be <span class='bold-text'>passed</span> to a function, and the function will <span class='bold-text'>return</span> a value.</p>",
        "<pre><code class='language-javascript'>//Declare the function 'addAge'",
        "function addAge(theObject){",
        "   theObject.age = 23;",
        "}",
        "",
        "//Declare the function 'hasDrinkingAge'",
        "function hasDrinkingAge(age){",
        "   if( age >= 18 )",
        "     return true;",
        "   return false;",
        "}",
        "",
        "//Create object 'person':",
        "let person = {",
        "   name : 'Cristina'",
        "}",
        "",
        "// Pass object reference to the function",
        "addAge(person);",
        "",
        "//Pass age property to the function",
        "const ableToDrink = hasDrinkingAge(person.age)",
        "",
        "console.log(ableToDrink) // expected output: true",
        "</code></pre>",
        "<br />",

        "<p class='info-text'>In JavaScript, functions are first-class objects, because they can have properties and methods just like any other object. What distinguishes them from other objects is that functions can be called.Objects in JavaScript are <span class='bold-text'>extremely</span> versatile. Because of this, we can even <span class='bold-text'>pass a function as a parameter</span> into another function.</p>",
        "<pre><code class='language-javascript'>// Declare the function 'pokeMe'",
        " function pokeMe() {",
        "   console.log(\"Meow\");",
        " }",

        " function approachSomeone(someoneToPoke) {",
        "   console.log(\"tip tap tip tap\");",
        "   someoneToPoke(); // call the 'pokeMe' function",
        " }",
        "",
        " approachSomeone(pokeMe); //pass the 'pokeMe' function as a parameter",
        "</code></pre>",
        "<br />",

        "<p class='info-text'><span class='bold-text'>There are 2 types of syntaxes for functions:</span></p>",
        "<p class='info-text'><span class='dot-text'> • Plain function: </span></p> ",
        "<pre><code class='language-javascript'>const introduce = function(name) {",
        "   console.log(\"Hello my name is\", name);",
        " };",
        "",
        "introduce(\"Cristina\")",
        "</code></pre>",
        "<br />",

        "<p class='info-text'><span class='dot-text'> • Arrow function: </span></p> ",
        "<pre><code class='language-javascript'>const introduce = (name) => {",
        "   console.log(\"Hello my name is\", name);",
        " };",
        "",
        "introduce(\"Cristina\")",
        "</code></pre>",
        "<br />",

        "<div class='tan-border' id='bytheway-border'>#bytheway</div>",
        "<p class='info-text'><span class = 'bold-text'>So can I use from now on just arrow functions?</span></p>",
        "<p class='info-text'>Be careful! Yes, you can use arrow functions as long as you are aware of what <code>this</code> keyword is bound to. In plain function expressions, the <code>this</code> keyword is bound to different values based on the context in which it is called. With arrow functions however, <code>this</code> is lexically bound. It means that it uses <code>this</code> from the code that contains the arrow function. Let's have a small example:</p>",
        "<pre><code class='language-javascript'>let cat = {",
        "  lives: 9,",
        "  jumps: () => {",
        "    this.lives--;",
        "  }",
        "}",
        "</code></pre>",
        "<p class='info-text'>When you call <code>cat.jumps</code>, the number of lives does not decrease. It is because this is not bound to anything, and will inherit the value of <code>this</code> from its parent scope.</p>",
        "<br />",

        "<p class='info-text'><span class = 'bold-text'>What is a callback function?</span></p>",
        "<p class='info-text'><span class='bold-text'>Simply put</span>: A callback is a function that is to be executed <span class='bold-text'>after</span> another function has finished executing — hence the name ‘call back’.</p>",
        "<p class='info-text'><span class='bold-text'>More complexly put</span>: In JavaScript, functions are objects. Because of this, functions can take functions as arguments, and can be returned by other functions. Functions that do this are called <span class='bold-text'>higher-order functions</span>. Any function that is passed as an argument is called a <span class='bold-text'>callback function</span>.</p>",
        "<br />",

        "<p class='info-text'><span class = 'bold-text'>Why do we need callbacks?</span></p>",
        "<p class='info-text'>For one very important reason — JavaScript is an event driven language. This means that instead of waiting for a response before moving on, JavaScript will keep executing while listening for other events. You can’t just call one function after another and hope they execute in the right order. <span class='brown-and-italic'> Callbacks are a way to make sure certain code doesn’t execute until other code has already finished execution.</span></p>"
      ]},

    "nodejs": {
      "content":
      [
        "<h1 class='title'>Node.js Project Overview</h1>",
        "<p class='info-text'><span class = 'semi-title'>What is Node.js?</span></p>",
        "<p class='info-text'>Node.js is a framework for writing server-side JavaScript applications. Node is often used to build back end services that communicate with client-side applications. These applications get and send data through a back end service called an API. The API serves as an interface between different programs so they are able to talk to each other. </p>",
        "<br />",

        "<p class='info-text' ><span class='semi-title'>Basic API components overview </span> </p>",

        "<p class='info-text' ><span class='semi-title'>package.json</span> </p>",
        "<p class='info-text'>In the previous semesters, while working with projects build with Spring, we also learned what is a <span class='bold-text'>maven</span> file. The maven file contains <span class='bold-text'> lifecycle methods</span>(how to build, how to run, how to compile), <span class='bold-text'>dependencies</span> and <span class='bold-text'>metadata</span>. Guess what? package.json is the same. This file holds various <span class='bold-text'>metadata</span> relevant to the project and is also used to give information to npm that allows it to <span class='bold-text'>identify the project</span> as well as handle the project's <span class='bold-text'>dependencies</span>. The dependencies key has an object as the value. This object takes a <span class='bold-text'>key-value pair</span> where the key is the package name and the value is the version number. </p>",
        "<p class='info-text'>Here's an example package.json file:</p>",
        "<pre><code class='language-javascript'> {}",
        "</code></pre>",
        "<p class='info-text'>It's empty! There are no fixed requirements of what should be in a package.json file, for an application. The only requirement is that <span class='bold-text'>it respects the JSON format</span>, otherwise it cannot be read by programs that try to access its properties programmatically.</p>",
        "<p class='info-text'>This is another example of an package.json file:</p>",
        "<pre><code class='language-javascript'>{",
        "  \"dependencies\": {",
        "    \"express\": \"4.17.1\",",
        "    \"request\": \"^2.88.2\",",
        "   }",
        "}",
        "</code></pre>",
        "<p class='info-text'>The version number is in <span class='bold-text'>semver syntax</span> which designates each section with different meaning. semver is broken into three sections separated by a dot.</p>",
        "<p class='info-text'>Given a version number MAJOR.MINOR.PATCH, increment the:</p>",
        "<div class='info-text'>",
        "<p class='dot-text'> • MAJOR ",
          "<span class = 'explicit-dot-text'>version when you make incompatible API changes</span>",
        "</p>",
        "<p class='dot-text'> • MINOR ",
          "<span class = 'explicit-dot-text'>version when you add functionality in a backwards compatible manner, and</span>",
        "</p>",
        "<p class='dot-text'> • PATCH ",
          "<span class='explicit-dot-text'>version when you make backwards compatible bug fixes.</span>",
        "</p>",
        "</div>",
        "<pre><code class='language-javascript'>major.minor.patch",
        "1.0.2",
        "</code></pre>",
        "<p class='info-text'><a href='#' onclick='toolsClick()'>npm</a> uses the <span class= 'bold-text'>tilde (~)</span> and <span class='bold-text'>caret (^)</span> to designate which patch and minor versions to use respectively. So if you see ~1.0.2 it means to install version 1.0.2 or the latest patch version such as 1.0.4. If you see ^1.0.2 it means to install version 1.0.2 or the latest minor or patch version such as 1.1.0.</p>",
        "<br />",

        "<p class='info-text' ><span class='semi-title'>package-lock.json</span></p>",
        "<p class='info-text'><code>package-lock.json</code> is an very important improvement for npm: <span class='bold-text'>guarantee exact same version of every package</span>. How to make sure your project built with same packages in different environments in a different time? Let's say, you may use ^1.2.3 in your <code>package.json</code>, or some of your dependencies are using that way, but how can you ensure each time npm install will pick up same version in your dev machine and in the build server? <code>package-lock.json</code> will ensure that.</p> ",
        "<br />",

        "<p class='info-text' ><span class='semi-title'>node_modules</span></p>",
        "<p class='info-text'>The <code>node_modules</code> directory is only for <span class='bold-text'>build tools</span>. The <code>package.json</code> file in the app root defines what libraries will be installed into <code>node_modules</code> when you run npm install.You shouldn't push it to github (you should even add it to your .gitignore), bacause everyone who clones your repository can download it themselves (based on your package.json).</p>"
      ]
    },

    "tools":{
      "content":[
        "<h1 class='title'>Tools</h1>",
        "<p class='info-text' ><span class='semi-title'>npm </span> </p>",
        "<p class='info-text'><span class='bold-text'>SYNOPSIS</span></p>",
        "<pre><code class='language-bash'> npm < command > [args]",
        "</code></pre>",
        "<p class='info-text'><span class='bold-text'>DESCRIPTION</span></p>",
        "<p class='info-text'>To make use of these tools (or packages) in Node.js, we need to be able to <span class='bold-text'>install</span> and <span class='bold-text'>manage</span> them in a useful way. This is where npm, the <span class = 'bold-text'>Node package manager</span>, comes in. It is extremely configurable to support a wide variety of use cases. Most commonly, it is used to <span class='bold-text'>publish, discover, install, and develop</span> node programs.</p>"
      ]
    },

    "commands": {
      "content": [
        "<h1 class='title'>Commands</h1>",
        "<p class='info-text' ><span class='semi-title'>Run Node.js scripts</span></p>",
        "<p class='info-text'>If your main Node.js application file is <code>app.js</code>, you can call it by typing:</p>",
        "<br />",
        "<pre><code class='language-bash'> node app.js </code></pre>",
        "<p class='info-text'>The usual way to run a Node.js program is to run the node globally available command (once you install Node.js) and pass the name of the file you want to execute.</p>",
        "<br />",
        "<p class='info-text'>or</p>",
        "<br />",

        "<pre><code class='language-bash'> nodemon app.js </code></pre>",
        "<p class='info-text'><code>nodemon</code> will watch the files in the directory in which nodemon was started, and if any files change, nodemon will automatically restart your node application.</p>",
        "<br />",
        "<div class='beige-border' id='note-creating-array' ><span class='bold-text'>Note</span>: Never use the nodemon command in production! Use it only in the development environment!</div>",
        "<br />",

        "<p class='info-text' ><span class='semi-title'>Installing all dependencies</span></p>",
        "<p class='info-text'>If a project has a <a href='#' onclick='nodejsClick()' <code>package.json</code></a> file, by running</p>",
        "<pre><code class='language-bash'> npm install </code></pre>",
        "<p class='info-text'>it will install everything the project needs, in the <a href='#' onclick='nodejsClick()' <code>node_modules</code></a> folder, creating it if it's not existing already and also <code>package-lock.json</code></p>",
        "<br />",

        "<p class='info-text' ><span class='semi-title'>Installing a single package</span></p>",
        "<p class='info-text'>You can also install a specific package by running</p>",
        "<pre><code class='language-bash'> npm install < package-name > </code></pre>",
        "<p class='info-text'>Often you'll see more flags added to this command:</p>",
        "<p class='info-text'> • <code>--save</code> installs and adds the entry to the <a href='#' onclick='nodejsClick()'<code>package.json</code></a> file <span class='italic-text'>dependencies</span>",
        "<p class='info-text'> • <code>--save-dev</code>  installs and adds the entry to the <a href='#' onclick='nodejsClick()'<code>package.json</code></a> file <span class='italic-text'>devDependencies</span></p>",
        "<p class='info-text'>The difference is mainly that <code>devDependencies</code> are usually development tools, like a testing library, while <code>dependencies</code> are bundled with the app in production.</p>",
        "<br />",

        "<p class='info-text' ><span class='semi-title'>Updating packages</span></p>",
        "<p class='info-text'>Updating is also made easy, by running</p>",
        "<pre><code class='language-bash'> npm update </code></pre>",
        "<p class='info-text'>npm will check all packages for a newer version that satisfies your versioning constraints.</p>",
        "<br />",

        "<p class='info-text' ><span class='semi-title'>Updating a specific package</span></p>",
        "<p class='info-text'>You can specify a single package to update as well:</p>",
        "<pre><code class='language-bash'> npm update < package-name > </code></pre>",
        "<br />",

        "<p class='info-text' ><span class='semi-title'>Running Tasks</span></p>",
        "<p class='info-text'>The <a href='#' onclick='nodejsClick()'<code>package.json</code></a> file supports a format for specifying command line tasks that can be run by using</p>",
        "<pre><code class='language-bash'> npm run < task-name > </code></pre>",
        "<p class='info-text'>For example:</p>",
        "<pre><code class='language-json'>{",
        " \"dependencies\": {",
        "     \"express\": \"^4.17.1\",",
        "     \"nodemon\": \"^2.0.2\"",
        " },",
        "  \"scripts\": {",
        "     \"start-dev\": \"nodemon app.js\"",
        " }",
        "}",
        "</code></pre>",
        "<p class='info-text'>You can run the first script by typing:</p>",
        "<pre><code class='language-bash'> npm run start-dev </code></pre>"
      ]
    },

    "modules":{
      "content":[
        "<h1 class='title'>Modules</h1>",
        "<p class='info-text' ><span class='semi-title'>express</span></p>",
        "<p class='info-text'>Express is a minimal and flexible Node.js web application framework that provides a robust set of features to develop web and mobile applications. It facilitates the rapid development of Node based Web applications.</p>",
        "<p class='info-text'><span class='bold-text'>Simple Example</span></p>",
        "<p class='info-text'>Following is a very basic Express app which starts a server and listens on port 3000 for connection. If any error occurs, the server will throw the error. This app responds with 'Hello there' for requests to the homepage.</p>",
        "<pre><code class='language-javascript'>const express = require(\"express\") //this import system is for backend",
        "const app = express() //instantiate express and put it in app variable",
        "",
        "//call the server with app",
        "//make an http get request with get",
        "//on path '/', the server will return a JSON representation of a 'Hello there' message",
        "app.get(\"/\", (req, res) => {",
        "  return res.send({ message: \"Hello there\" });",
        "});",
        "",
        "//listen on port 3000",
        "app.listen(3000, error => {",
        "  if (error) { // if any error occurs, show it in the terminal",
        "    console.log(error);",
        "  }",
        "  console.log(\"Server is running on port\", 3000);",
        "});",
        "</code></pre>",
        "<br />",

        "<p class='info-text' ><span class='semi-title'>nodemon</span></p>",
        "<p class='info-text'>nodemon is a tool that helps develop node.js based applications by automatically restarting the node application when file changes in the directory are detected. -perfect for development</p>",
        "<br />",

        "<p class='info-text' ><span class='semi-title'>request</span></p>",
        "<p class='info-text'>Request is designed to be the simplest way possible to make http calls. It supports HTTPS and follows redirects by default. Unfortunately, as of Feb 11th 2020, request is fully deprecated. No new changes are expected land. In fact, none have landed for some time.</p>",
        "<pre><code class='language-javascript'>const request = require('request');",
        "request('http://www.google.com', function (error, response, body) {",
        "   console.error('error:', error); // Print the error if one occurred",
        "   console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received",
        "   console.log('body:', body); // Print the HTML for the Google homepage.",
        "});",
        "</code></pre>",
        "<br />",

        "<p class='info-text' ><span class='semi-title'>cross-env</span></p>",
        "<p class='info-text'>Run scripts that set and use environment variables across platforms</p>",
        "<p class='info-text'>I use this in my npm scripts:</p>",
        "<pre><code class='language-json'>{",
        "   \"scripts\": {",
        "   \"start\": \"cross-env PORT=80 node app.js\",",
        "   \"start-dev\": \"cross-env PORT=3000 nodemon app.js\"",
        "  }",
        "}",
        "</code></pre>",
        "<p class='info-text'>The PORT environment variable will be set by cross-env </p>",
        "<p class='info-text'>This is how I use it in the code:</p>",
        "<pre><code class='language-javascript'>const port = process.env.PORT ? process.env.PORT : 3000; //put the PORT value from the env in a variable",
        "const server = app.listen(port, (error) => {",
        "   if(error){",
        "   console.log(error)",
        "   }",
        "console.log(\"System running on port\", server.address().port )",
        "});",
        "</code></pre>"
        
      ]
    },

    "rest": {
      "content": [
        "<h1 class='title'>REST API</h1>",
        "<p class='info-text'>An <span class='bold-text'>API</span> is an application programming interface. It is a set of rules that allow programs to talk to each other. The developer creates the API on the server and allows the client to talk to it.</p>",
        "<p class='info-text'><span class='bold-text'>REST</span> determines how the API looks like. It stands for “Representational State Transfer”. It is a set of rules that developers follow when they create their API. One of these rules states that you should be able to get a piece of data (called a resource) when you link to a specific URL.</p>",
        "<p class='info-text'>Each URL is called a <span class='bold-text'>request</span> while the data sent back to you is called a <span class='bold-text'>response</span>.</p>",
        "<br />",

        "<p class='info-text' ><span class='semi-title'>HTTP Methods</span></p>",
        "<p class='info-text'><span class='bold-text'>HTTP</span> defines a set of request methods to indicate the desired action to be performed for a given resource</p>",
        "<p class='info-text'>In REST, primary data representation is called <span class='bold-text'>Resource</span>.</p>",
        "<p class='info-text'><span class='bold-text'>A resource can be a member or a collection</span>. For example, “<code>devices</code>” is a collection resource and “<code>device</code>” is a member resource. We can identify “<code>devices</code>” collection resource using the URI “<code>/devices</code>”. We can identify a member “<code>device</code>” resource using the URI “<code>/devices/{deviceId}</code>”.",
        "<br />",
        "<br />",
        "<p class='info-text'><span class='bold-text'>For most of the demonstrations about http requests, take into consideration the code below:</span></p>",
        "<pre><code class='language-javascript'>const express = require(\"express\"); //import express",
        "const app = express(); // //instantiate express and put it in app variable",
        "",
        "// parse application/json",
        "app.use(express.json());",
        "",
        "let devices = [",
        "{ id: 1, name: \"Phone\" },",
        "{ id: 2, name: \"Smarth Watch\" },",
        "{ id: 3, name: \"Tablet\" }",
        "];",
        "",
        "app.listen(3000, error => {",
        "  if (error) { // if any error occurs, show it in the terminal",
        "    console.log(error);",
        "  }",
        "  console.log(\"Server is running on port\", 3000);",
        "});",
        "</code></pre>",
        "<br />",
        "<p class='info-text' ><span class='semi-title'>GET</span></p>",
        "<p class='info-text'><span class='brown-and-italic'>Retrieve</span> a representation of the collection resource. In this case, the devices.</p>",
        "<pre><code class='language-javascript'>//The url: localhost:3000/devices",
        "app.get(\"/devices\", (req, res) => {",
        "return res.send({ response: devices });",
        "});",
        "</code></pre>",
        "<br />",

        "<p class='info-text'><span class='brown-and-italic'>Retrieve</span> a representation of a member resource. In this case, a device. In this case, we can do it in 2 ways:</p>",
        "<div class='info-text'>",
           "<p class='dot-text'> • By using path variables:",
                "<span class = 'explicit-dot-text'> Any colons (<code>:</code>) on a path denotes a variable. You should replace these values with actual values of when you send your request.</span>",
           "</p>",
        "</div>",
          "<pre><code class='language-javascript'>//The url: localhost:3000/device/1",
          "app.get(\"/device/:index\", (req, res) => {",
          "const index = Number(req.params.index); //get the index from the path",
          "const device = devices.find(device => device.id === index);",
          "return res.send({ response: device });",
          "});",
          "</code></pre>",
          "<br />",
        "<div class='info-text'>",
           "<p class='dot-text'> • By using query parameters:",
           "<span class = 'explicit-dot-text'> Technically, query parameters are not part of the REST architecture, but you’ll see lots of APIs use them.They always begin with a question mark (<code>?</code>). Each parameter pair is then separated with an ampersand (<code>&</code>)</span>",
           "</p>",
        "</div>",
           "<pre><code class='language-javascript'>//The url: localhost:3000/device?index=1",
          "app.get(\"/device\", (req, res) => {",
          "const index = Number(req.query.index); // get the index from the query parameters",
          "const device = devices.find(device => device.id === index);",
          "return res.send({ response: device });",
          "});",
          "</code></pre>",
          "<br />",

        "<p class='info-text' ><span class='semi-title'>POST</span></p>",
        "<p class='info-text'><span class='brown-and-italic'>Create</span> a member resource in the collection resource using the instructions in the request body. In this case, a device.</p>",
        "<pre><code class='language-javascript'>let lastElementId = devices[devices.length - 1].id; // get the id of the last element",
        "",
        "app.post(\"/devices\", (req, res) => {",
        "const newDevice = req.body; //json type",
        "if (newDevice.name) { // check if there is a name provided in the request body",
        "   devices.push({ id: ++lastElementId, name: newDevice.name }); // add the new device in the devices array",
        "   return res.send(devices); // send the updated array",
        "   }",
        "return res.status(400).send({ response: \"Invalid input\" }); // if no name was provided, throw 'Invalid input error'",
        "});",
        "</code></pre>",
        "<br />",

        
        "<p class='info-text' ><span class='semi-title'>PUT</span></p>",
        "<p class='info-text'><span class='brown-and-italic'>Replace</span> all the representations of the member resource with the representation in the request body. In this case, modify the name of a device.</p>",
        "<pre><code class='language-javascript'>app.put(\"/devices/:id\", (req, res) => {",
        "const deviceIndex = devices.findIndex(",
        "    device => device.id === Number(req.params.id) // return the device object to be modified",
        "  );",
        "",
        "  let editedDevice = {",
        "    ...devices[deviceIndex], // get all the properties of the specific device to be modified",
        "    ...({ name } = req.body) // 'overwrite' the name property with the desired one",
        "  };",
        "",
        "  devices[deviceIndex] = editedDevice; // replace the old device with the newly created one",
        "  res.send({ response: editedDevice }); // return the modified device",
        "});",
        "</code></pre>",
        "<br />",

        "<p class='info-text'><span class='semi-title'>DELETE</span></p>",
        "<p class='info-text'><span class='brown-and-italic'>Delete</span> all the representations of the member resource. In this case, delete a device.</p>",
        "<pre><code class='language-javascript'>app.delete(\"/devices/:id\", (req, res) => {",
        "  const givenId = Number(req.params.id); // get the id from the path variables",
        "  let found = false; // assume that no device with the given id will be found",
        "  if (id) { // check if the path is correct and an id has been provided",
        "    devices = devices.filter(device => {",
        "      if(device.id === givenId)",
        "        found = true; //if we find the device to be deleted, change the 'found' variable to true" ,
        "      else return device;",
        "    })",
        "",
        "    if(found === false) return res.status(404).send({ response : \"Device not found\"}) //if a wrong id has been provided, throw 'Device not found' error",
        "    return res.send({}); //return an empty object if the device was successfully deleted",
        "  }",
        "  return res.status(400).send({ response: \"Invalid input\" }); // if no id was provided, throw 'Invalid input' error",
        "});",
        "</code></pre>",
        "<br />"
      ]
    },

    "jquery":{
      "content":[
        "<h1 class='title'>Why do we use jQuery?</h1>",
        "<p class='info-text'>jQuery is a <span class='bold-text'>lightweight</span>, \"write less, do more\", JavaScript library. The purpose of jQuery is to make it much easier to use JavaScript on your website.jQuery takes a lot of common tasks that require many lines of JavaScript code to accomplish, and wraps them into methods that you can call with a single line of code.jQuery also simplifies a lot of the complicated things from JavaScript, like <span class='bold-text'>AJAX calls</span> and <span class='bold-text'>DOM manipulation</span>.</p>",
        "<br />",

        "<p class='info-text'>The jQuery syntax is tailor-made for selecting HTML elements and performing some action on the element(s).Basic syntax is: <code>$(selector).action()</code></p>",
                    "<div class='info-text'>",
                       "<p class='dot-text'> • A <code>$</code> sign to define/access jQuery",
                        "</p>",
                       "<p class='dot-text'> • A <code>(selector)</code> to \"query (or find)\" HTML elements",
                      "</p>",
                      "<p class='dot-text'> • A jQuery <code>action()</code> to be performed on the element(s)",
                      "</p>",
                    "</div>",
                    "<br/>"
      ]
    }
      
    

}