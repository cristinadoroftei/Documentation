{

    "whatIsJavascript": 
    {
        "content": ["<h1 class='title'>Javascript in a nutshell</h1>" ,
                  "<p class='info-text'>JavaScript is a scripting language used to create and control dynamic website content,",
                  "i.e. data validation, display popup messages, handling different events of DOM elements, modifying style of DOM elements etc.</p>",
                  "<br />",
                  "<p class='info-text'>JavaScript is mostly used on the front end, but it’s versatile enough to be used on back end infrastructure, too.</>", 
                  "<p class='info-text'>Overview of javascript:</p>",
                  "<br/>",

                  "<div class='beige-border' id='weakly-typed-language-border' >Weakly Typed Language</div>",
                    "<div class='info-text'>",
                       "<p class='dot-text'> • No explicit type assignment:",
                            "<span class = 'explicit-dot-text'> Javascript knows types like numbers, string or booleans, but it doesn't force you to define which type you are using in a variable.</span>",
                       "</p>",
                       "<p class='dot-text'> • Data types can be switched dynamically:",
                       "<span class = 'explicit-dot-text'> Indeed, you can have a variable where you store a number which you can suddenly change to a text variable. While this gives you greater flexibility to be able to change variables and not to have strict typing, it can also lead to errors, so it's something you have to also be aware of.</span>",
                       "</p>",
                    "</div>",
                    "<br/>",
                  
                  "<div class='aquamarine-border' id='object-oriented-language-border'>Multi-paradigm Language</div>",
                  "<div class='info-text'>",
                    "<p class='dot-text'> • Data can be organized in logical objects:",
                       "<span class = 'explicit-dot-text'> JavaScript is a multi-paradigm, dynamic language with types and operators, standard built-in objects, and methods. Its syntax is based on the Java and C languages — many structures from those languages apply to JavaScript as well. JavaScript supports object-oriented programming with object prototypes, instead of classes. JavaScript also supports functional programming — because they are objects, functions may be stored in variables and passed around like any other object.</span>",
                    "</p>",
                  "</div>",
                  "<br/>",

                  "<div class='tan-border' id='versatile-border'>Versatile Language</div>",
                  "<div class='info-text'>",
                    "<p class='dot-text'> • Runs in browser & directly on a PC/Server:",
                       "<span class = 'explicit-dot-text'> Javacript runs in a browser and this is actually where it comes from, but you can also use it with NodeJs to run it on your PC outside of a browser setup or also on a server.</span>",
                    "</p>",
                  "</div>",
                  "<br/>"
                  ]
    },

    "varVsLetVsConst":
    {
        "content":[ "<h1 class='title'>var, let, const -What's the difference?</h1>",
                    "<p class='info-text'> Before we can understand how <code class = 'purple-font-bold'>var</code>, <code class = 'purple-font-bold'>let</code> and <code class = 'purple-font-bold'>const</code> differ we need to understand a computer science-y concept called",
                      "<span class = 'brown-and-italic'> scope.</span>",
                      "<span>Scoping is determining where variables, functions, and objects are accessible in your code during runtime. </span>",
                    "</p>",
                    "<br/>",

                    "<p class='info-text'>Firstly, <code class = 'purple-font-bold'>var</code> variables <span class = 'bold-text'>can be redefined or reassigned</span>. Let’s use console.log to show the width which we can update to be 200, and then we’ll console log the width again.</p>",
                    "<pre><code class='language-javascript'>var width = 100;",
                        "console.log(width); // 100",
                        "width = 200;",
                        "console.log(width); // 200",
                        "var width = 300",
                        "console.log(width) //300",
                    "</code></pre>",
                    "<br />",

                    "<p class='info-text'><code class = 'purple-font-bold'>let</code> variables <span class = 'bold-text'>can be reassigned, but not redefined</span>.</p>",
                    "<pre><code class='language-javascript'>let age = 70;",
                    "age = 23; // Works fine",
                    "let age = 34; // SyntaxError: Identifier 'age' has already been declared",
                    "</code></pre>",
                    "<br />",

                    "<p class='info-text'><code class = 'purple-font-bold'>const</code> variables <span class = 'bold-text'>cannot be rebinded, neither redefined</span>.</p>",
                    "<pre><code class='language-javascript'>const a = 42;",
                    "a = 43; // TypeError: Assignment to constant variable.",
                    "const a = 44 // SyntaxError: Identifier 'a' has already been declared",
                    "</code></pre>",
                    "<p class='info-text'><span class='red-text'>Note!</span> It doesn't mean that the value is immutable. Its properties still can be changed.</p>",
                    "<pre><code class='language-javascript'>const obj = {};",
                    "obj.a = 42;",
                    "console.log(obj.a); // 42",
                    "</code></pre>",
                    "<br />",

                    "<p class='info-text'><code class = 'purple-font-bold'>var</code> variables are <span class = 'brown-and-italic'>function scoped</span>, which means that they are only available inside the function that they are created in. However, if they are not declared in a function, then they are <span class = 'brown-and-italic'>globally scoped</span>, and they’re available in the whole window.</p>",
                    "<pre><code class='language-javascript'>var cat = 'cat';",
                    "function animals(){",
                        "   var dog = 'dog';",
                        "   if (cat != null) {",
                        "     var kitten = 'kitten';",
                        "   }",
                        "   console.log(cat); // cat",
                        "   console.log(dog); // dog",
                        "   console.log(kitten); //kitten",
                    "}",
                    "console.log(cat); // cat",
                    "console.log(bird); // Uncaught ReferenceError: dog is not defined",
                    "console.log(kitten); // Uncaught ReferenceError: kitten is not defined",
                    "animals();",
                "</code></pre>",
                "<br />",

                "<p class='info-text'>However, in many cases <code class = 'purple-font-bold'>var</code> doesn't seem like it would be the best choice. But why? Look careful here: </p>",
                "<pre><code class='language-javascript'>var age = 100;",
                    "if(age > 12) {",
                    "  var dogYears = age * 7;",
                    "console.log(`You are ${dogYears} dog years old!`);",
                    "}",
                "</code></pre>",
                "<p class='info-text'>The one thing that is a little bit strange here is that <code> var dogYears </code> is just a temporary variable, and I just needed this real quick in order to calculate something and then stick it into a <code>console.log</code>. If you go to your browser console and call dogYears, you’ll see that it’s leaked outside of the if statement and it is now a global variable that lives on window, which isn’t really what we want.</p>",
                "<p class='info-text'>Now it's time for <code class = 'purple-font-bold'>let</code> and <code class = 'purple-font-bold'>const</code> to shine and show why they are better. </p>",
                "<br />",

                "<p class='info-text'>One of the benefits of using <code class = 'purple-font-bold'>let</code> and <code class = 'purple-font-bold'>const</code> is that instead of a variable being scoped to the function, it is <span class = 'brown-and-italic'>block scoped</span>. It means that it will be scoped to the closest set of curly brackets. This code seems like a better choice:</p>",
                "<pre><code class='language-javascript'>let age = 100;",
                    "if(age > 12) {",
                    "  let dogYears = age * 7;",
                    "console.log(`You are ${dogYears} dog years old!`);",
                    "}",
                "</code></pre>",
                "<p class='info-text'>If you call dogYears in the browser console, it says, “Dog years is not defined.” Why? Because I declared it as a <code class = 'purple-font-bold'>let</code> variable. It is only declared inside of a <span class = 'brown-and-italic'>block scope</span>, not a global scope like var and that temporary variable has not leaked out of the block.</p>",
                "<br/>",

                "<p class='info-text'>If you use <code class = 'purple-font-bold'>let</code> instead of <code class = 'purple-font-bold'>var</code> in a loop, with each iteration you get a new variable. That means that you can safely use a closure inside a loop:</p>",
                "<pre><code class='language-javascript'>// Logs 3 thrice, not what we meant.",
                "for (var i = 0; i < 3; i++) {",
                "   setTimeout(() => console.log(i), 0);",
                "}\n",
                "// Logs 0, 1 and 2, as expected.",
                "for (let j = 0; j < 3; j++) {",
                "    setTimeout(() => console.log(j), 0);",
                "}",
                "</code></pre>",
                "<br />",

                "<p class='info-text'>Because of the <span class = 'bold-text'>temporal dead zone</span>, variables declared using <code class = 'purple-font-bold'>let</code> or <code class = 'purple-font-bold'>const</code> can't be accessed before they are declared. Attempting to do so throws an error.</p>",
                "<pre><code class='language-javascript'>console.log(noTDZ); // undefined",
                "var noTDZ = 43;",
                "console.log(hasTDZ); // ReferenceError: hasTDZ is not defined",
                "const hasTDZ = 42;",
                "</code></pre>",
                "<br />",

                "<div class='tan-border' id='bytheway-border'>#bytheway</div>",
                "<p class='info-text'><span class = 'bold-text'>Is using '<code>var</code>' to declare variables optional?</span></p>",
                "<p class='info-text'>This is one of the tricky parts of Javascript, but also one of its core features. A variable declared with var 'begins its life' right where you declare it. If you leave out the var, it's like you're talking about a variable that you have used before.</p>",
                "<pre><code class='language-javascript'>var cat = 'Sasha';",
                "cat = 'Kate';",
                "function animal() {",
                "   if (cat === 'Kate') {",
                "     dog = 'Ozzy'; // not declared before. Please avoid doing this",
                "   }",
                "}",
                "</code></pre>",
                "<p class='info-text'>With regards to scope, it is <span class='bold-text'>not</span> true that variables automatically become global. Rather, Javascript will traverse up the scope chain to see if you have used the variable before. If it finds an instance of a variable of the same name used before, it'll use that and whatever scope it was declared in. If it doesn't encounter the variable anywhere it'll eventually hit the global object (<code>window</code> in a browser) and will attach the variable to it.</p>",
                "<br />",
                "<p class='info-text'><span class = 'bold-text'>Is '<code>var</code>' dead?</span></p>",
                "<p class='info-text'> Some people are saying, “<code>var</code> is dead!” Some say, “Use <code>let</code>.” while others always use <code>const</code>.</p>",
                "<p class='info-text'><code>var</code> isn’t dead – it still does what it always has done — it’s function scoped and you can reassign or re-bind it. Here are the opinions of some very smart people in the Javascript scene (click on the name to read the whole article):</p>",
                "<p class='info-text'><a target='_blank' href='https://mathiasbynens.be/notes/es6-const'>Mathias Byens</a> says that whenever you make a variable, assume it’s <code>const</code>. Only use <code>let</code> if you need to update the value of the variable. You can use <code>const</code> to keep it the same value.  </p>",
                "<p class='info-text'><a target='_blank' href='https://davidwalsh.name/for-and-against-let'>Kyle Simpson</a>, author of You Don’t Know JS, and all-around Javascript guru, argues that: 'There are going to be places in real world code where some variables are going to be properly scoped to the entire function, and for those variables, var is a better signal'</p>",
                "<p class='info-text'>Most Javascript experts agree <code>var</code> shouldn’t be used. Douglas Crockford, the man who popularized JSON, is against the use of <code>var</code>. He indicates that, “var might possibly still be useful in an extreme case like machine-generated code, but I’m stretching hard there. Wes Bos also says he won’t use var.“</p>"
        ]
    }

}